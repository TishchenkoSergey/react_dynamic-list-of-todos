{"version":3,"sources":["api.jsx","components/propTypes/TodoPropTypes.js","components/Todo/Todo.jsx","components/TodoListControllers/TodoListControllers.jsx","components/TodoList/TodoList.jsx","components/SelectedUser/SelectedUser.jsx","App.jsx","index.js"],"names":["request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","a","todos","filter","todo","userId","title","getUser","user","PropTypes","number","isRequired","string","bool","Todo","completed","selectUser","selectedUserId","className","classNames","TodoList__item","type","readOnly","checked","button","onClick","TodoListControllers","handleChange","searchValue","selectValue","name","placeholder","value","onChange","TodoList","state","search","visibleTodos","all","active","event","setState","target","this","props","renderedTodos","includes","map","key","id","React","PureComponent","SelectedUser","userError","updateUser","newUserId","newUser","clearSelectedUser","email","phone","App","todosError","getTodos","catch","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9a3e4dc.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n\nexport async function getTodos() {\n  const todos = await request(`/todos`);\n\n  return todos.filter(todo => todo.userId && todo.title);\n}\n\nexport async function getUser(userId) {\n  const user = await request(`/users/${userId}`);\n\n  return user;\n}\n","import PropTypes from 'prop-types';\n\nexport const TodoPropTypes = {\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number,\n  title: PropTypes.string.isRequired,\n  updatedAt: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  completed: PropTypes.bool,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoPropTypes } from '../propTypes/TodoPropTypes';\n\nexport const Todo = ({\n  todo: { completed, userId, title },\n  selectUser,\n  selectedUserId,\n}) => (\n  <div\n    className={classNames({\n      TodoList__item: true,\n      'TodoList__item--checked': completed,\n      'TodoList__item--unchecked': !completed,\n    })}\n  >\n    <label>\n      <input type=\"checkbox\" readOnly checked={completed} />\n      <p>{title}</p>\n    </label>\n\n    <button\n      className={classNames({\n        button: true,\n        'TodoList__user-button': true,\n        'TodoList__user-button--selected':\n          selectedUserId === userId,\n      })}\n      type=\"button\"\n      onClick={() => selectUser(userId)}\n    >\n      {`User #${userId}`}\n    </button>\n  </div>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape(TodoPropTypes).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoListControllers.scss';\n\nexport const TodoListControllers = ({\n  handleChange,\n  searchValue,\n  selectValue,\n}) => (\n  <>\n    <label>\n      <input\n        name=\"search\"\n        type=\"text\"\n        placeholder=\"Search todo\"\n        value={searchValue}\n        onChange={handleChange}\n      />\n    </label>\n\n    <label>\n      <select\n        name=\"visibleTodos\"\n        value={selectValue}\n        onChange={handleChange}\n      >\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n    </label>\n  </>\n);\nTodoListControllers.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  searchValue: PropTypes.string.isRequired,\n  selectValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoPropTypes } from '../propTypes/TodoPropTypes';\nimport { Todo } from '../Todo';\nimport { TodoListControllers } from '../TodoListControllers';\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    visibleTodos: 'all',\n  }\n\n  filter = {\n    all: () => true,\n    completed: todo => todo.completed,\n    active: todo => !todo.completed,\n  }\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  render() {\n    const { todos, selectedUserId, selectUser } = this.props;\n    const { search, visibleTodos } = this.state;\n    const renderedTodos = todos.filter(todo => (\n      todo.title.includes(search) && this.filter[visibleTodos](todo)\n    ));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <TodoListControllers\n          handleChange={this.handleChange}\n          searchValue={search}\n          selectValue={visibleTodos}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              renderedTodos.map(todo => (\n                <li\n                  key={todo.id}\n                >\n                  <Todo\n                    todo={todo}\n                    selectUser={selectUser}\n                    selectedUserId={selectedUserId}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(TodoPropTypes),\n  ).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './SelectedUser.scss';\n\nexport class SelectedUser extends React.PureComponent {\n  state = {\n    user: {},\n    userError: false,\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  async updateUser(newUserId) {\n    if (this.state.user.id === newUserId) {\n      return;\n    }\n\n    const newUser = await getUser(newUserId);\n\n    if (!newUser) {\n      this.setState({ userError: true });\n\n      return;\n    }\n\n    this.setState({ userError: false });\n\n    this.setState({ user: newUser });\n  }\n\n  render() {\n    const { user, userError } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <>\n        {userError\n          ? (<h3>{`Can't find user info `}</h3>)\n          : (\n            <div className=\"SelectedUser\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={clearSelectedUser}\n              >\n                Clear\n              </button>\n\n              <h2 className=\"SelectedUser__title\">\n                {`User: #${user.id}`}\n              </h2>\n\n              <h3 className=\"SelectedUser__name\">\n                {user.name}\n              </h3>\n\n              <p className=\"SelectedUser__email\">\n                {user.email}\n              </p>\n\n              <p className=\"SelectedUser__phone\">\n                {user.phone}\n              </p>\n            </div>\n          )}\n      </>\n    );\n  }\n}\nSelectedUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { SelectedUser } from './components/SelectedUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    todosError: false,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      })\n      .catch(() => this.setState({ todosError: true }));\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, todosError } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todosError\n            ? (\n              <h2>\n                {`Can't load todos list `}\n              </h2>\n            )\n            : (\n              <TodoList\n                todos={todos}\n                selectedUserId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <SelectedUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'Select user to view information'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}